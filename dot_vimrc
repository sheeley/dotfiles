" set shell because vim doesn't like fish
" * ignore .tmpl in filename
if &shell =~# 'fish$'
	set shell=zsh
endif

" General {{{
" neovim
let g:python3_host_prog = '/usr/local/bin/python3'

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set noswapfile

" set termguicolors
set modeline " enable modelines - useful for overriding settings per-file
set modelines=2 " look in first n lines for modeline
filetype plugin indent on " detect filetypes
syntax enable
set background=dark
set autochdir " change working directory to open buffer
set lazyredraw " Don't redraw while executing macros (good performance config)
imap ;; <Esc>
set showmatch " Show matching brackets when text indicator is over them
command! W w !sudo tee % > /dev/null " :W sudo save - handy for permission issues
set backspace=indent,eol,start
" Less annoying errors
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500

" Turn persistent undo on
" means that you can undo even when you close a buffer/VIM
try
	set undodir=$HOME/.nvim/undodir
	set undofile
catch
endtry

" Use system clipboard
if has('clipboard')
	set clipboard=unnamed
endif

" }}} end General

" Formatting {{{
set smartindent
set smarttab
set softtabstop=4
set foldmethod=marker
" }}} End Formatting

" Search {{{
set ignorecase " Ignore case when searching
set smartcase " When searching try to be smart about cases
set hlsearch " Highlight search results
set incsearch " search incrementally
" }}} end Search

" line numbering {{{
" turn hybrid numbers on, automatically toggle on type
set number relativenumber
augroup numbertoggle
	autocmd!
	autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
	autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END
" }}} end line numbering

" Key mappings {{{
" Edit vim configuration
map <leader>config :tabe ~/local/share/chezmoi/dot_vimrc<cr> 
map <leader>vimrc :tabe ~/local/share/chezmoi/dot_vimrc<cr> 
" run current file
nnoremap <leader>r :!%:p<Enter>
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
" }}} end Key mappings

" Files {{{
augroup vimrc
	" this will echo commands as setting them for debugging:
	" :set verbose=9
	autocmd!
	" automatically chezmoi apply after editing a file in chezmoi repo
	autocmd BufWritePost ~/.local/share/chezmoi/* silent! ! chezmoi apply --source-path %
	" follow that with sourcing .vimrc if it's the one that changed
	autocmd BufWritePost ~/.local/share/chezmoi/dot_vimrc silent source ~/.vimrc
	" TODO: automatically :PlugInstall?

	" Golang
	autocmd BufWritePost *.go :GoBuild
	autocmd BufWritePost *_test.go :GoTest

	" autoformat on save
	" TODO? au BufWrite * :Autoformat

	" fish
	" Set up :make to use fish for syntax checking.
	autocmd FileType compiler fish

	" toml 
	autocmd FileType toml setlocal commentstring=#\ %s
augroup end
" }}} end Files



"  VIM-Plug {{{
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" disable ale lsp to use coc instead - needs to go before plug?
let g:ale_disable_lsp = 1


call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary'
Plug 'easymotion/vim-easymotion'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'majutsushi/tagbar'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dense-analysis/ale'

" languages
Plug 'hashivim/vim-terraform', { 'for': 'tf' }
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'itspriddle/vim-shellcheck'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'go' }
Plug 'dag/vim-fish', { 'for': 'fish' }
Plug 'editorconfig/editorconfig-vim', { 'for': 'editorconfig' }
" Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascriptreact', 'typescript'] }
" Plug 'leafgarland/typescript-vim', { 'for': 'javascript' }
" Plug 'maxmellon/vim-jsx-pretty', { 'for': 'javascript' }
" trials
"
" Plug 'liuchengxu/vim-which-key'
" Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/vim-easy-align'
" end trials
call plug#end()
" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" }}} End VIM-Plug

" Solarized {{{
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
" silent! helptags ALL
" let g:solarized_termcolors = 16
let g:solarized_visibility = "high"
let g:solarized_termtrans = 1
let g:solarized_contrast = "high"
colorscheme solarized
" }}} end Solarized

" clap {{{
let g:clap_insert_mode_only = 1 " close clap on first esc
" }}} end clap

" vim-go settings {{{
let g:go_fmt_command = "goimports"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_auto_type_info = 1
let g:go_auto_sameids = 1
" }}} end vim-go settings

" statusline {{{
set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:airline#extensions#ale#enabled = 1
let g:airline_theme='solarized'
" }}} end statusline

" python-mode {{{
let g:pep8_ignore="E501"
let g:pymode_lint_ignore = ["E501", "W",]
" }}} end python-mode

" coc {{{
let g:coc_global_extensions = ['coc-json', 'coc-git', 'coc-pyright', 'coc-markdownlint', 
			\ 'coc-go', 'coc-css', 'coc-highlight', 'coc-sh', 'coc-sql', 
			\ 'coc-yaml', 'coc-toml', 'coc-tsserver', 'coc-pairs']

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
	" Recently vim can merge signcolumn and number column into one
	set signcolumn=number
else
	set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
	inoremap <silent><expr> <c-space> coc#refresh()
else
	inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	elseif (coc#rpc#ready())
		call CocActionAsync('doHover')
	else
		execute '!' . &keywordprg . " " . expand('<cword>')
	endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
	autocmd!
	" Setup formatexpr specified filetype(s).
	autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	" Update signature help on jump placeholder.
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
	nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
	nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
	inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
	inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
	vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
	vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" }}} end coc
