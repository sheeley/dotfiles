#! /usr/bin/env bash
set -e

PATH="$PATH:./bin"

OS=$(uname -a)
IS_MAC=
IS_NIX=
IS_LINUX=
NOT_NIX=true
NOT_MAC=true
if [[ "$OS" == *"NixOS"* ]]; then
	IS_NIX=true
	NOT_NIX=
elif [[ "$OS" == *"Linux"* ]]; then
	IS_LINUX=true
elif [[ "$OS" == *"Darwin"* ]]; then
	IS_MAC=true
	NOT_MAC=
fi
YELLOW="\033[1;33m"
RESET="\033[0m"

OFFLINE=""
if [[ "$1" == "--offline" ]]; then
	OFFLINE="--offline"
fi
set -u

if command -v scutil &>/dev/null; then
	rg --pcre2 'TODO:(?!.*# ignore)' || true # ignore
fi

# minimally, yell if nix version out of date - linux/mac only
if [[ "$NOT_NIX" ]]; then
	upgrade_nix
fi

set +e
if ! ssh-add -l >/dev/null; then
	ssh-add ~/.ssh/id_ed25519
fi
set -e

OSC=$(get-osc)
VALID_HOSTNAMES=$(get-flake-configurations)

# HOST=$(scutil --get HostName)
# if ! grep -q "darwinConfigurations.\"$HOST\"" ~/dotfiles/flake.nix && confirm "Change from current hostname: $HOST?"; then
# 	while true; do
# 		set_hostname && break
# 	done
# fi

HN=$(hostname_wrapper)
if grep -q "$HN" home-manager-only; then
	home-manager --flake . --impure switch --show-trace -b backup
	exit 0
fi

# is this a valid host, or the special case of sheeley (using home-manager on linux)
if [[ ! "${VALID_HOSTNAMES[*]}" =~ $HN ]]; then
	echo "invalid hostname: '$HN'"
	if [[ "$IS_NIX" && ! -d "$HOME/dotfiles/$(hostname)" ]]; then
		if confirm "Change from current hostname: $HOST?"; then
			while true; do
				set_hostname && break
			done
		fi
		if confirm "Make a new directory for this host?"; then
			echo "mkdir $(hostname)"
			echo "cp /etc/nixos/*.nix ./$(hostname)/"
			echo ""
			echo "ensure configuration.nix has:"
			echo "networking.hostName = \"$(hostname)\";"
			echo ""
			if confirm "apply changes and reboot?"; then
				sudo nixos-rebuild switch
				sudo reboot
			else
				echo "sudo nixos-rebuild switch"
				echo "sudo reboot"
				exit 1
			fi
		fi

	elif confirm "override hostname?"; then
		while true; do
			read -r FAUX_HOST
			if [[ "${VALID_HOSTNAMES[*]}" =~ $FAUX_HOST ]]; then
				if confirm "use $FAUX_HOST?"; then
					HN="$FAUX_HOST"
					break
				fi
			fi
		done
	else
		if [[ "$IS_MAC" ]]; then
			echo "sudo scutil --set LocalHostName ..."
		elif [[ "$IS_NIX" ]]; then
			echo "put in /etc/nixos/configuration.nix: "
			echo "networking.hostName = \"$HN\";"
			echo "sudo nixos-rebuild switch"
			echo "sudo reboot"
		fi
		exit 1
	fi
fi

if [[ "$IS_MAC" ]]; then
	nix build ".#${OSC}.${HN}.system" --impure --extra-experimental-features "nix-command flakes" $OFFLINE --show-trace
elif [[ "$IS_NIX" ]]; then
	nix build ".#${OSC}.${HN}.config.system.build.toplevel" --impure --extra-experimental-features "nix-command flakes" $OFFLINE --show-trace
else
	nix build ".#${OSC}.${HN}" --impure --extra-experimental-features "nix-command flakes" $OFFLINE --show-trace
fi
# if possible, diff the derivations and ask for input
if command -v nvd &>/dev/null; then
	nvd diff /run/current-system result
	if opt_out "nvd ^ Continue?"; then
		exit 0
	fi

	if command -v nix-diff &>/dev/null; then
		if confirm "Run nix-diff?"; then
			nix-diff --line-oriented --context 5 /run/current-system result
			if opt_out "nix-diff ^ Continue?"; then
				exit 0
			fi
		fi
	fi
fi

if [[ "$IS_MAC" ]]; then
	echo "darwin-rebuild"

	if [[ -f /etc/bashrc ]]; then
		sudo mv -f /etc/bashrc /etc/bashrc.backup-before-nix
	fi
	if [[ -f /etc/zshrc ]]; then
		sudo mv -f /etc/zshrc /etc/bashrc.backup-before-nix
	fi

	./result/sw/bin/darwin-rebuild switch --flake . --impure
else
	sudo nixos-rebuild switch --flake . --impure
fi

date >last-applied.txt

# source ~/.config/fish/config.fish
