#! /usr/bin/env bash
set -e

PATH="$PATH:./bin"

OS=$(uname -a)
IS_MAC=
IS_NIX=
if [[ "$OS" == *"NixOS"* ]]; then
	IS_NIX=true
elif [[ "$IS_MAC" ]]; then
	IS_MAC=true
fi

OFFLINE=""
if [[ "$1" == "--offline" ]]; then
	OFFLINE="--offline"
fi
set -u

if command -v scutil &>/dev/null; then
	rg 'TODO:' || true # ignore this
fi

HN=$(hostname_wrapper)

# minimally, yell if nix version out of date
upgrade_nix

OSC="nixosConfigurations"

OS=$(uname -a)
if [[ "$IS_MAC" ]]; then
	OSC="darwinConfigurations"
fi

# TODO: is there a cleaner way of doing this?
# this doesn't work with darwinConfigurations yet.
# nix flake show --extra-experimental-features "flakes nix-command" --impure .
VALID_HOSTNAMES=$(grep "$OSC" flake.nix | grep -o '".*"' | sed 's/"//g')

if [[ ! "${VALID_HOSTNAMES[*]}" =~ $HN ]]; then
	echo "invalid hostname: '$HN'"
	if [[ "$IS_MAC" ]]; then
		echo "sudo scutil --set LocalHostName ..."
	elif [[ "$IS_NIX" ]]; then
		echo "put in /etc/nixos/configuration.nix: "
		echo "networking.hostName = \"$HN\";";
		echo "sudo nixos-build switch"
	fi
	exit 1
fi

if [[ "$IS_MAC" ]]; then
	nix build ".#${OSC}.${HN}.system" --impure --extra-experimental-features "nix-command flakes" --show-trace "$OFFLINE"
else
	nix build ".#${OSC}.${HN}.config.system.build.toplevel" --impure --extra-experimental-features "nix-command flakes" --show-trace "$OFFLINE"
fi

# if possible, diff the derivations and ask for input
if command -v nvd; then
	nvd diff /run/current-system result

	if command -v nix-diff; then
		nix-diff --line-oriented --context 5 /run/current-system result
	fi

	if opt_out "Continue?"; then
		exit 0
	fi
fi

if [[ "$IS_MAC" ]]; then
	echo "darwin-rebuild"
	./result/sw/bin/darwin-rebuild switch --flake . --impure
else
	sudo nixos-rebuild switch --flake . --impure
fi

date >last-applied.txt

# source ~/.config/fish/config.fish
