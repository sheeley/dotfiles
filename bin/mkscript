#! /usr/bin/env nu
# Purpose: Create new executable scripts from templates
# This Nushell script creates a new script file based on predefined templates,
# makes it executable, and opens it in the default editor
# Used to: Quickly create new scripts with proper permissions and boilerplate
#          code, ensuring consistent script structure across the system


def main [
	scriptName: string = "", # name of script to create
	--local = false # create in current directory
	--shell = "" # shell to use
	] {
	# Get the directory containing script templates
	let templateDir = $"($env.HOME)/dotfiles/templates/scripts"
	# Get list of supported shell types from template filenames
	let supportedTypes = ls ($templateDir | path join script.* | into glob) | each {|e| $e.name | path parse} | get extension

 	mut shell = $shell
	while ($shell | is-empty) {
		$shell = ($supportedTypes | input list --fuzzy)
	}

	mut scriptName = $scriptName
	while ($scriptName | is-empty) {
		$scriptName = (input "script name? ")
	}

	let scriptDir = $"($env.HOME)/dotfiles/bin"
	# Determine where to create the script (bin directory or current directory)
	let targetDir = if $local { (pwd) } else { $scriptDir }

	# Build the full path to the new script
	let file = $"($scriptDir)/($scriptName)"

	# Check if the script already exists
	if ($file | path exists) {
		echo "script exists"
		exit 1
	}

	# Create the script from the template
 	let sourcePath =  $"($templateDir)/script.($shell)"
 	open $sourcePath | save $file
	# Make the script executable
	chmod +x $file

	# Open the new script in the editor if in a terminal
	if $env.TERM != "" {
		^$env.EDITOR $file
	}
}

