#! /usr/bin/env python3
from subprocess import run
import os
import fnmatch
import re
import stat


# If you don't already know the file which is being changed,
# then you can monitor the Library/Preferences folder with
# ls -lFat to see the most recently changed files listed first
# you can probably determine which file you're interested in from there.
WARNING = """
# GENERATED FILE, DO NOT TOUCH
# Edit plist_export or create a file without generated.sh in its name.
"""
DS_PATH = "ds"
HOME_DIR = os.path.expanduser("~")
OUT_DIR = f"{HOME_DIR}/.local/share/chezmoi/bin/plists/"
OUT_PREFIX = "run_once_after_"
OUT_SUFFIX = ".generated.sh"
escaped_home = HOME_DIR.replace("/", "\\/")

for filename in os.listdir(OUT_DIR):
    if fnmatch.fnmatch(filename, f"*{OUT_SUFFIX}"):
        os.remove(f"{OUT_DIR}/{filename}")


def wrap(wrapper, items):
    if not items:
        return []
    out = []
    for item in items:
        out.append(wrapper)
        out.append(item)
    return out


class Rules:
    domain = None
    current_host = None
    exclusions = []
    exclusion_overrides = []
    application = None

    def __init__(self, domain=None, current_host=None,
                 exclusions=None, exclusion_overrides=None, application=None):
        self.exclusions = exclusions or []
        self.exclusion_overrides = exclusion_overrides or []
        self.application = application
        self.current_host = current_host
        self.domain = domain

    def to_args(self):
        output = wrap("--exclude", self.exclusions)
        output += wrap("--exclude-override", self.exclusion_overrides)
        return output

    def and_rules(self, exclusions=[], exclusion_overrides=[],
                  application=None, domain=None, current_host=None):
        return Rules(
            exclusions=exclusions+self.exclusions,
            exclusion_overrides=exclusion_overrides+self.exclusion_overrides,
            application=application, domain=domain, current_host=current_host)


def only(include=[], application=None, domain=None, current_host=None):
    return Rules(exclusions=[".*"], exclusion_overrides=include,
                 domain=domain, current_host=current_host,
                 application=application)


global_rules = Rules(exclusions=[
    "SU*",
    "NSStatusItem Preferred Position *",
    "last-analytics-stamp",
    "NoSync*",
    "NSWindow Frame*",
    "NSToolbar*",
    "FRFeedbackReporter*"
],
    exclusion_overrides=["SUAutomaticallyUpdate"])

to_export = {
    "ai.krisp.krispMac": global_rules,
    "codes.rambo.AirBuddy": global_rules.and_rules(application="AirBuddy"),
    "com.abhishek.Clocker": global_rules.and_rules(application="Clocker",
                                                   exclusions=["iVersionLastChecked"]),
    "com.apple.controlcenter": Rules(application="Control Center"),
    "com.apple.dock": global_rules.and_rules(application="Dock", exclusions=[
        "mod-count",
        "trash-full",
    ]),
    "com.apple.finder": global_rules.and_rules(application="Finder", exclusions=[
        "FXRecentFolders",
        "FXSidebarUpgraded*",
        "FavoriteTagNames",
        "GoToField",
        "GoToFieldHistory",
        "LastTrashState",
        "RecentMoveAndCopyDestinations",
        "QuickLookPreview*",
        "NewWindowTargetPath",
        "FXPreferencesWindow..*"
    ]),
    "com.apple.screencapture": only(application="SystemUIServer", include=["location"]),
    "com.apple.symbolichotkeys": None,
    "com.googlecode.iterm2": global_rules,
    "com.if.Amphetamine": Rules(application="Amphetamine", exclusions=[
        "Session Durations",
        "Total Session Run Time"
    ]),
    "com.omnigroup.OmniFocus3": global_rules.and_rules(exclusions=[
        "LastArchiveRequestTimeInterval",
        "LastAutomaticBackupDate",
        "LastAutomaticBackupTailTransactionIdentifier",
        "LastExportDirectory",
    ]),
    "com.sourcegear.DiffMerge": global_rules,
    "com.surteesstudios.Bartender": only(application="Bartender 4", include=[
        "SUAutomaticallyUpdate",
        "ShowForUpdateSettings",
        "ProfileSettings",
        "UseBartenderBar",
        "appSettings",
        "statusBarImageNamed",
        "license2HoldersName",
        "license4HoldersName",
       ]),
    "org.shiftitapp.ShiftIt": global_rules.and_rules(application="ShiftIt"),
    "com.apple.Safari": only(include=[
        "AlwaysRestoreSessionAtLaunch",
        "AutoFillPasswords",
        "FindOnPageMatchesWordStartsOnly",
        "HomePage",
        "IncludeDevelopMenu",
        "SearchProviderIdentifier",
        "ShowFavoritesBar-v2",
        "ShowOverlayStatusBar",
        "ShowSidebarInNewWindows",
        "ShowSidebarInTopSites",
        "SidebarViewModeIdentifier",
        "UniversalSearchEnabled",
        "WebKitDeveloperExtrasEnabledPreferenceKey",
        "WebKitPreferences.*",
    ]),
    "NSGlobalDomain": only(include=[
        "AppleActionOnDoubleClick",
        "AppleMiniaturizeOnDoubleClick",
        "AppleScrollerPagingBehavior",
        "AppleShowAllExtensions",
        "NSAutomaticCapitalizationEnabled",
        "NSAutomaticDashSubstitutionEnabled",
        "NSAutomaticPeriodSubstitutionEnabled",
        "NSAutomaticQuoteSubstitutionEnabled",
        "NSAutomaticSpellingCorrectionEnabled",
        "NSAutomaticTextCompletionEnabled",
        "NSQuitAlwaysKeepsWindows",
        "NSUserDictionaryReplacementItems",
        "WebAutomaticSpellingCorrectionEnabled",
        "com.apple.mouse.scaling",
        "com.apple.sound.beep.flash",
        "com.apple.sound.beep.volume",
        "com.apple.sound.uiaudio.enabled",
        "com.apple.springing.delay",
        "com.apple.springing.enabled",
        "com.apple.trackpad.forceClick",
    ]),
    "NSGlobalDomainCurrentHost": only(domain="NSGlobalDomain", current_host=True, include=[
        "AppleActionOnDoubleClick",
        "AppleAntiAliasingThreshold",
        "AppleInterfaceStyle",
        "AppleInterfaceStyleSwitchesAutomatically",
        "AppleMiniaturizeOnDoubleClick",
        "AppleScrollerPagingBehavior",
        "AppleShowAllExtensions",
        "NSAutomaticCapitalizationEnabled",
        "NSAutomaticDashSubstitutionEnabled",
        "NSAutomaticPeriodSubstitutionEnabled",
        "NSAutomaticQuoteSubstitutionEnabled",
        "NSAutomaticSpellingCorrectionEnabled",
        "NSAutomaticTextCompletionEnabled",
        "NSPreferredWebServices",
        "NSQuitAlwaysKeepsWindows",
        "WebAutomaticSpellingCorrectionEnabled",
        "com.apple.mouse.scaling",
        "com.apple.sound.beep.flash",
        "com.apple.sound.beep.volume",
        "com.apple.sound.uiaudio.enabled",
        "com.apple.springing.delay",
        "com.apple.springing.enabled",
        "com.apple.trackpad.forceClick",
    ]),
    "com.agilebits.onepassword7": only(application="1Password 7", include=[
        "OPPrefShowSafariInlineMenu",
        "OPPrefShowSafariInlineMenuAutomatically",
        "OPPreferencesNotifyCompromisedWebsites",
        "ShortcutRecorder BrowserActivation",
        "ShortcutRecorder GlobalActivation",
        "ShortcutRecorder GlobalLock"
    ]),
    "net.shinyfrog.bear": only(application="Bear", include=[
        "SFAppIconMatchesTheme",
        "SFAppThemeName",
        "SFAutoGrabURLTitles",
        "SFEditorLineWidthMultiplier",
        "SFFirstLaunchNotes",
        "SFFoldCompletedTodo",
        "SFNoteTextViewAutomaticSpellingCorrectionEnabled",
        "SFNoteTextViewContinuousSpellCheckingEnabled",
        "SFNoteTextViewGrammarCheckingEnabled",
        "SFTagsListSortAscending",
        "SFTagsListSortBy",
    ])
}

for (key, rules) in to_export.items():
    # if "Bartender" not in key:
    #     continue
    domain = key
    current_host_suffix = ""
    if rules:
        if rules.domain:
            domain = rules.domain

        if rules.current_host:
            current_host_suffix = ".currenthost"

    file_name = f"{OUT_DIR}{OUT_PREFIX}{domain}{current_host_suffix}{OUT_SUFFIX}"
    with open(file_name, "w") as o_file:
        cmd = [
            DS_PATH,
            "-d",
            domain
        ]
        restart_application = None
        if rules:
            cmd += rules.to_args()
            restart_application = rules.application

        # def wrap_quote(arg):
        #     if "*" in arg or " " in arg:
        #         return f"'{arg}'"
        #     return arg
        # wrapped_cmd = map(wrap_quote, cmd)
        # print(" ".join(wrapped_cmd), "\n", file_name, "\n")
        command = run(cmd, capture_output=True)
        command.check_returncode()
        fixed = re.sub(escaped_home, "~", command.stdout.decode('utf-8'))
        fixed = re.sub("\n", WARNING, fixed, count=1)
        o_file.write(fixed)
        if restart_application:
            o_file.write(f"start_application -r -a \"{restart_application}\"")
    os.chmod(file_name, stat.S_IRWXU | stat.S_IRGRP | stat.S_IROTH)
