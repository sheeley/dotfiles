#! /usr/bin/env nu --stdin

def main [
	search_term: string # filename or content to search for
	--all_repos = false # search all, not just local
	--content = false # search file contents instead of filenames
] {
	let repo = if ($all_repos) { "" } else { "local" }
	let home_dir = ($env.HOME)
	
	print $"Searching for: ($search_term)"
	print $"Search type: (if ($content) { "content" } else { "filename" })"
	
	if ($content) {
		print "Content search not yet implemented - searching filenames instead"
	}
	
	print "Searching for files..."
	
	# Search filenames using borgmatic list --find with --short to get just paths
	let all_files = try {
		(^borgmatic list --repository $repo --find $search_term --short | complete).stdout
		| lines 
		| where ($it | str trim) != ""
		| where ($it | str contains "local:") == false
		| where ($it | str contains "Listing archive") == false
		| where ($it | str contains "Searching archives") == false
		| each { |file| $file | str trim }
	} catch {
		[]
	}
	
	if ($all_files | is-empty) {
		print $"No matches found for '($search_term)'"
		return
	}
	
	# Get unique filenames and replace home directory with ~
	let unique_files = ($all_files 
		| uniq 
		| each { |file|
			if ($file | str starts-with $home_dir) {
				$file | str replace $home_dir "~"
			} else if ($file | str starts-with "/Users/") {
				$file | str replace --regex "^/Users/[^/]+" "~"
			} else {
				$file
			}
		}
		| sort)
	
	print $"\nFound ($unique_files | length) unique files"
	
	# First selection: choose which file
	let selected_file_display = ($unique_files | input list --fuzzy $"Select file to see versions:")
	
	if ($selected_file_display | is-empty) {
		print "No file selected"
		return
	}
	
	# Convert back to full path for matching
	let selected_file_full = if ($selected_file_display | str starts-with "~") {
		$selected_file_display | str replace "~" $home_dir
	} else {
		$selected_file_display
	}
	
	print $"\nGetting versions for ($selected_file_display)..."
	
	# Get all archives that contain this specific file - suppress verbose output
	let archives_with_file = try {
		(^borgmatic list --repository $repo --short --last 20 | complete).stdout
		| lines 
		| where ($it | str trim) != ""
		| where ($it | str contains "local:") == false
		| where ($it | str contains "Listing archive") == false
		| each { |archive|
			let archive_name = ($archive | str trim)
			# Check if this archive contains the file (suppress output)
			let has_file = try {
				let result = (^borgmatic list --repository $repo --archive $archive_name --path $selected_file_full --short | complete)
				if ($result.exit_code == 0 and ($result.stdout | str trim) != "") {
					1
				} else {
					0
				}
			} catch { 0 }
			
			if ($has_file > 0) {
				$archive_name
			}
		}
		| where ($it != null)
		| sort -r
	} catch {
		[]
	}
	
	if ($archives_with_file | is-empty) {
		print $"No versions found for ($selected_file_display)"
		return
	}
	
	print $"\nFound ($archives_with_file | length) versions of ($selected_file_display)"
	print "Use arrow keys to navigate, Enter to restore, Ctrl+C to cancel"
	
	# Interactive selection with preview
	let selected_archive = (interactive_select_with_preview $archives_with_file $selected_file_full $selected_file_display $repo)
	
	if ($selected_archive | is-empty) {
		print "No version selected"
		return
	}
	
	let selected_file = $selected_file_full
	
	print $"\nRestoring ($selected_file_display) from ($selected_archive)..."
	
	# Restore file
	try {
		# Create a unique temp directory to avoid conflicts
		let temp_dir = $"/tmp/borg-restore-(date now | format date '%Y%m%d-%H%M%S')"
		mkdir $temp_dir
		
		# Extract file to temp location
		^borgmatic extract --repository $repo --archive $selected_archive --destination $temp_dir --path $selected_file | complete
		let temp_file = $"($temp_dir)/($selected_file)"
		
		if ($temp_file | path exists) {
			# Backup current file if it exists
			if ($selected_file | path exists) {
				cp $selected_file $"($selected_file).bak"
				print $"Backed up current file to ($selected_file).bak"
			}
			
			# Create directory if it doesn't exist
			let parent_dir = ($selected_file | path dirname)
			if not ($parent_dir | path exists) {
				mkdir $parent_dir
			}
			
			# Restore file
			cp $temp_file $selected_file
			print $"Restored ($selected_file) from archive ($selected_archive)"
			
			# Clean up temp directory
			rm -rf $temp_dir
		} else {
			print "Could not extract file for restoration"
			rm -rf $temp_dir
		}
	} catch { |e|
		print $"Error during restoration: ($e)"
	}
}

def interactive_select_with_preview [archives: list<string>, file_path: string, display_path: string, repo: string] {
	let total = ($archives | length)
	mut current_index = 0
	
	loop {
		# Clear screen and show interface
		^clear
		
		print $"Versions of ($display_path) - Use ↑/↓ to navigate, Enter to restore, q to quit"
		print $"═══════════════════════════════════════════════════════════════════════════════"
		
		# Show archive list on the left (first 40 chars)
		for $i in 0..($total - 1) {
			let archive = ($archives | get $i)
			let prefix = if ($i == $current_index) { "► " } else { "  " }
			let truncated = if (($archive | str length) > 37) { 
				($archive | str substring 0..37) + "..." 
			} else { 
				$archive 
			}
			print $"($prefix)($truncated)"
		}
		
		print "═══════════════════════════════════════════════════════════════════════════════"
		
		# Show preview on the right
		let current_archive = ($archives | get $current_index)
		print $"Preview of ($display_path) from ($current_archive):"
		print "───────────────────────────────────────────────────────────────────────────────"
		
		# Extract and show preview
		let preview_content = try {
			let temp_dir = $"/tmp/borg-preview-(date now | format date '%Y%m%d-%H%M%S')"
			mkdir $temp_dir
			
			let extract_result = (^borgmatic extract --repository $repo --archive $current_archive --destination $temp_dir --path $file_path | complete)
			
			if ($extract_result.exit_code == 0) {
				let temp_file = $"($temp_dir)/($file_path)"
				if ($temp_file | path exists) {
					let content = (cat $temp_file | lines | first 20 | str join "\n")
					rm -rf $temp_dir
					$content
				} else {
					rm -rf $temp_dir
					"File not found in archive"
				}
			} else {
				rm -rf $temp_dir
				"Error extracting file"
			}
		} catch {
			"Error previewing file"
		}
		
		print $preview_content
		
		# Get user input
		let key = (input --bytes-until "\n")
		
		# Handle navigation
		if ($key == [27 91 65]) {  # Up arrow
			if ($current_index > 0) {
				$current_index = ($current_index - 1)
			}
		} else if ($key == [27 91 66]) {  # Down arrow
			if ($current_index < ($total - 1)) {
				$current_index = ($current_index + 1)
			}
		} else if ($key == [10]) {  # Enter
			return ($archives | get $current_index)
		} else if ($key == [113]) {  # 'q'
			return ""
		}
	}
}
