#! /usr/bin/env nu --stdin

def main [
	search_term: string # filename or content to search for
	--all_repos = false # search all, not just local
	--content = false # search file contents instead of filenames
] {
	let repo = if ($all_repos) { "" } else { "local" }
	let home_dir = ($env.HOME)
	
	print $"Searching for: ($search_term)"
	print $"Search type: (if ($content) { "content" } else { "filename" })"
	
	if ($content) {
		print "Content search not yet implemented - searching filenames instead"
	}
	
	print "Searching for files..."
	
	# Search filenames using borgmatic list --find
	let matches = try {
		borgmatic list --repository $repo --find $search_term 
		| lines 
		| where ($it | str trim) != ""
		| each { |line|
			# Parse the output format: archive_name path/to/file
			let parts = ($line | split row " " | where ($it | str trim) != "")
			if ($parts | length) >= 2 {
				let archive = ($parts | get 0)
				let file = ($parts | slice 1.. | str join " ")
				{archive: $archive, file: $file, match_type: "filename"}
			}
		}
		| where ($it != null)
	} catch {
		[]
	}
	
	if ($matches | is-empty) {
		print $"No matches found for '($search_term)'"
		return
	}
	
	# Get unique filenames and replace home directory with ~
	let unique_files = ($matches 
		| get file 
		| uniq 
		| each { |file|
			if ($file | str starts-with $home_dir) {
				$file | str replace $home_dir "~"
			} else {
				$file
			}
		}
		| sort)
	
	print $"\nFound ($unique_files | length) unique files:"
	
	# First selection: choose which file
	let selected_file_display = ($unique_files | input list --fuzzy $"Select file to see versions:")
	
	if ($selected_file_display | is-empty) {
		print "No file selected"
		return
	}
	
	# Convert back to full path for matching
	let selected_file_full = if ($selected_file_display | str starts-with "~") {
		$selected_file_display | str replace "~" $home_dir
	} else {
		$selected_file_display
	}
	
	# Get all versions of the selected file
	let file_versions = ($matches 
		| where file == $selected_file_full
		| sort-by archive -r)
	
	print $"\nFound ($file_versions | length) versions of ($selected_file_display):"
	
	# Second selection: choose which version
	let selected_version = ($file_versions | each { |match| 
		$"($match.archive)"
	} | input list --fuzzy $"Select version to preview/restore:")
	
	if ($selected_version | is-empty) {
		print "No version selected"
		return
	}
	
	let selected_archive = $selected_version
	let selected_file = $selected_file_full
	
	print $"\nSelected: ($selected_file_display) from ($selected_archive)"
	
	# Preview file
	print "\n--- File Preview ---"
	try {
		let preview = (borgmatic extract --repository $repo --archive $selected_archive --destination /tmp --path $selected_file --dry-run
			| complete)
		
		if ($preview.exit_code == 0) {
			# Actually extract to temp location for preview
			borgmatic extract --repository $repo --archive $selected_archive --destination /tmp --path $selected_file
			let temp_file = $"/tmp/($selected_file)"
			
			if ($temp_file | path exists) {
				# Show preview (first 50 lines)
				cat $temp_file | lines | first 50 | each { |line| print $line }
				
				if ((cat $temp_file | lines | length) > 50) {
					print "\n... (file truncated, showing first 50 lines)"
				}
				
				# Ask if user wants to restore
				print $"\nRestore this file? Current file will be backed up with .bak extension"
				let restore = (["yes", "no"] | input list "Restore file?")
				
				if ($restore == "yes") {
					# Backup current file if it exists
					if ($selected_file | path exists) {
						cp $selected_file $"($selected_file).bak"
						print $"Backed up current file to ($selected_file).bak"
					}
					
					# Restore file
					cp $temp_file $selected_file
					print $"Restored ($selected_file) from archive ($selected_archive)"
				} else {
					print "File not restored"
				}
				
				# Clean up temp file
				rm $temp_file
			} else {
				print "Could not extract file for preview"
			}
		} else {
			print $"Error extracting file: ($preview.stderr)"
		}
	} catch { |e|
		print $"Error during preview: ($e)"
	}
}
